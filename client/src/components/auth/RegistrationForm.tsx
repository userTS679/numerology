import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { useToast } from '@/hooks/use-toast';
import { Calendar, Clock, MapPin, User, Mail, Lock, Eye, EyeOff } from 'lucide-react';
import { useMutation } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';

interface RegistrationData {
  email: string;
  password: string;
  confirmPassword: string;
  fullName: string;
  dateOfBirth: string;
  timeOfBirth?: string;
  placeOfBirth: string;
  latitude?: number;
  longitude?: number;
  timezone?: string;
  gender?: string;
  dataConsent: boolean;
  marketingConsent: boolean;
}

interface RegistrationFormProps {
  onSuccess: (data: any) => void;
  onSwitchToLogin: () => void;
}

export function RegistrationForm({ onSuccess, onSwitchToLogin }: RegistrationFormProps) {
  const [showPassword, setShowPassword] = useState(false);
  const [step, setStep] = useState(1);
  const { toast } = useToast();
  
  const { register, handleSubmit, formState: { errors }, watch, setValue, getValues } = useForm<RegistrationData>();

  const registerMutation = useMutation({
    mutationFn: async (data: RegistrationData) => {
      const response = await apiRequest('POST', '/api/users/register', data);
      return response.json();
    },
    onSuccess: (data) => {
      toast({
        title: "‡§ñ‡§æ‡§§‡§æ ‡§¨‡§® ‡§ó‡§Ø‡§æ! üéâ",
        description: data.kundli ? "‡§Ü‡§™‡§ï‡§æ Kundli ‡§≠‡•Ä ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à!" : "‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ complete ‡§ï‡§∞‡•á‡§Ç‡•§"
      });
      onSuccess(data);
    },
    onError: (error: any) => {
      toast({
        title: "Registration ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ",
        description: error.message || "‡§ï‡•Å‡§õ ‡§ó‡§≤‡§§ ‡§π‡•Å‡§Ü ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§",
        variant: "destructive"
      });
    },
  });

  const onSubmit = (data: RegistrationData) => {
    if (data.password !== data.confirmPassword) {
      toast({
        title: "‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§Æ‡•à‡§ö ‡§®‡§π‡•Ä‡§Ç",
        description: "‡§¶‡•ã‡§®‡•ã‡§Ç ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§è‡§ï ‡§ú‡•à‡§∏‡•á ‡§π‡•ã‡§®‡•á ‡§ö‡§æ‡§π‡§ø‡§è‡•§",
        variant: "destructive"
      });
      return;
    }

    registerMutation.mutate(data);
  };

  const handleLocationSearch = async (place: string) => {
    // Mock geocoding - in production, use Google Maps API or similar
    const mockCoordinates = {
      'Delhi': { lat: 28.6139, lon: 77.2090, timezone: 'Asia/Kolkata' },
      'Mumbai': { lat: 19.0760, lon: 72.8777, timezone: 'Asia/Kolkata' },
      'Bangalore': { lat: 12.9716, lon: 77.5946, timezone: 'Asia/Kolkata' },
      'Chennai': { lat: 13.0827, lon: 80.2707, timezone: 'Asia/Kolkata' },
      'Kolkata': { lat: 22.5726, lon: 88.3639, timezone: 'Asia/Kolkata' },
    };

    const coords = mockCoordinates[place as keyof typeof mockCoordinates];
    if (coords) {
      setValue('latitude', coords.lat);
      setValue('longitude', coords.lon);
      setValue('timezone', coords.timezone);
    }
  };

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader className="text-center">
        <CardTitle className="text-2xl font-bold text-orange-600">
          NumenCoach ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à
        </CardTitle>
        <CardDescription>
          {step === 1 ? "‡§Ö‡§™‡§®‡§æ ‡§ñ‡§æ‡§§‡§æ ‡§¨‡§®‡§æ‡§è‡§Ç" : "‡§ú‡§®‡•ç‡§Æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§Ç"}
        </CardDescription>
      </CardHeader>
      
      <CardContent>
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          {step === 1 && (
            <>
              {/* Basic Account Info */}
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="fullName" className="flex items-center gap-2">
                    <User className="w-4 h-4" />
                    ‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ *
                  </Label>
                  <Input
                    id="fullName"
                    {...register("fullName", { required: "‡§®‡§æ‡§Æ ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à" })}
                    placeholder="‡§∞‡§æ‡§Æ ‡§ï‡•Å‡§Æ‡§æ‡§∞ ‡§∂‡§∞‡•ç‡§Æ‡§æ"
                    className="text-lg p-3"
                    data-testid="input-full-name"
                  />
                  {errors.fullName && (
                    <p className="text-sm text-destructive">{errors.fullName.message}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <Label htmlFor="email" className="flex items-center gap-2">
                    <Mail className="w-4 h-4" />
                    ‡§à‡§Æ‡•á‡§≤ ‡§è‡§°‡•ç‡§∞‡•á‡§∏ *
                  </Label>
                  <Input
                    id="email"
                    type="email"
                    {...register("email", { required: "‡§à‡§Æ‡•á‡§≤ ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à" })}
                    placeholder="ram@example.com"
                    className="text-lg p-3"
                    data-testid="input-email"
                  />
                  {errors.email && (
                    <p className="text-sm text-destructive">{errors.email.message}</p>
                  )}
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="password" className="flex items-center gap-2">
                      <Lock className="w-4 h-4" />
                      ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° *
                    </Label>
                    <div className="relative">
                      <Input
                        id="password"
                        type={showPassword ? "text" : "password"}
                        {...register("password", { required: "‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à" })}
                        placeholder="‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ 8 ‡§Ö‡§ï‡•ç‡§∑‡§∞"
                        className="text-lg p-3 pr-12"
                        data-testid="input-password"
                      />
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        className="absolute right-2 top-1/2 -translate-y-1/2"
                        onClick={() => setShowPassword(!showPassword)}
                      >
                        {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                      </Button>
                    </div>
                    {errors.password && (
                      <p className="text-sm text-destructive">{errors.password.message}</p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="confirmPassword">‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ *</Label>
                    <Input
                      id="confirmPassword"
                      type={showPassword ? "text" : "password"}
                      {...register("confirmPassword", { required: "‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° confirm ‡§ï‡§∞‡•á‡§Ç" })}
                      placeholder="‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§°‡§æ‡§≤‡•á‡§Ç"
                      className="text-lg p-3"
                      data-testid="input-confirm-password"
                    />
                    {errors.confirmPassword && (
                      <p className="text-sm text-destructive">{errors.confirmPassword.message}</p>
                    )}
                  </div>
                </div>

                <Button
                  type="button"
                  onClick={() => setStep(2)}
                  className="w-full bg-orange-600 hover:bg-orange-700 text-lg p-3"
                  data-testid="button-next-step"
                >
                  ‡§Ü‡§ó‡•á ‡§¨‡§¢‡§º‡•á‡§Ç - ‡§ú‡§®‡•ç‡§Æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä
                </Button>
              </div>
            </>
          )}

          {step === 2 && (
            <>
              {/* Birth Information */}
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="dateOfBirth" className="flex items-center gap-2">
                    <Calendar className="w-4 h-4" />
                    ‡§ú‡§®‡•ç‡§Æ ‡§§‡§æ‡§∞‡•Ä‡§ñ *
                  </Label>
                  <Input
                    id="dateOfBirth"
                    type="date"
                    {...register("dateOfBirth", { required: "‡§ú‡§®‡•ç‡§Æ ‡§§‡§æ‡§∞‡•Ä‡§ñ ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à" })}
                    className="text-lg p-3"
                    data-testid="input-date-of-birth"
                  />
                  {errors.dateOfBirth && (
                    <p className="text-sm text-destructive">{errors.dateOfBirth.message}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <Label htmlFor="timeOfBirth" className="flex items-center gap-2">
                    <Clock className="w-4 h-4" />
                    ‡§ú‡§®‡•ç‡§Æ ‡§∏‡§Æ‡§Ø (‡§∏‡§ü‡•Ä‡§ï Kundli ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ú‡§∞‡•Ç‡§∞‡•Ä)
                  </Label>
                  <Input
                    id="timeOfBirth"
                    type="time"
                    {...register("timeOfBirth")}
                    className="text-lg p-3"
                    data-testid="input-time-of-birth"
                  />
                  <p className="text-xs text-gray-500">
                    ‡§Ö‡§ó‡§∞ exact time ‡§®‡§π‡•Ä‡§Ç ‡§™‡§§‡§æ, ‡§§‡•ã approximate time ‡§°‡§æ‡§≤‡•á‡§Ç
                  </p>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="placeOfBirth" className="flex items-center gap-2">
                    <MapPin className="w-4 h-4" />
                    ‡§ú‡§®‡•ç‡§Æ ‡§∏‡•ç‡§•‡§æ‡§® *
                  </Label>
                  <Input
                    id="placeOfBirth"
                    {...register("placeOfBirth", { required: "‡§ú‡§®‡•ç‡§Æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à" })}
                    placeholder="‡§¶‡§ø‡§≤‡•ç‡§≤‡•Ä, ‡§≠‡§æ‡§∞‡§§"
                    className="text-lg p-3"
                    data-testid="input-place-of-birth"
                    onChange={(e) => {
                      const value = e.target.value;
                      setValue('placeOfBirth', value);
                      if (value.length > 3) {
                        handleLocationSearch(value);
                      }
                    }}
                  />
                  {errors.placeOfBirth && (
                    <p className="text-sm text-destructive">{errors.placeOfBirth.message}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <Label htmlFor="gender">‡§≤‡§ø‡§Ç‡§ó (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï)</Label>
                  <Select onValueChange={(value) => setValue("gender", value)}>
                    <SelectTrigger data-testid="select-gender">
                      <SelectValue placeholder="‡§ö‡•Å‡§®‡•á‡§Ç" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="male">‡§™‡•Å‡§∞‡•Å‡§∑</SelectItem>
                      <SelectItem value="female">‡§Æ‡§π‡§ø‡§≤‡§æ</SelectItem>
                      <SelectItem value="other">‡§Ö‡§®‡•ç‡§Ø</SelectItem>
                      <SelectItem value="prefer_not_to_say">‡§®‡§π‡•Ä‡§Ç ‡§¨‡§§‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {/* Consent Checkboxes */}
                <div className="space-y-4 p-4 bg-orange-50 rounded-lg">
                  <div className="flex items-start space-x-3">
                    <Checkbox
                      id="dataConsent"
                      {...register("dataConsent", { required: "Data consent ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à" })}
                      data-testid="checkbox-data-consent"
                    />
                    <Label htmlFor="dataConsent" className="text-sm leading-relaxed">
                      ‡§Æ‡•à‡§Ç ‡§Ö‡§™‡§®‡•Ä ‡§ú‡§®‡•ç‡§Æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä NumenCoach ‡§ï‡•á ‡§∏‡§æ‡§• share ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§π‡§Æ‡§§ ‡§π‡•Ç‡§Ç‡•§ 
                      ‡§Ø‡§π data ‡§∏‡§ø‡§∞‡•ç‡§´ Kundli ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è use ‡§π‡•ã‡§ó‡§æ‡•§ *
                    </Label>
                  </div>
                  {errors.dataConsent && (
                    <p className="text-sm text-destructive">{errors.dataConsent.message}</p>
                  )}

                  <div className="flex items-start space-x-3">
                    <Checkbox
                      id="marketingConsent"
                      {...register("marketingConsent")}
                      data-testid="checkbox-marketing-consent"
                    />
                    <Label htmlFor="marketingConsent" className="text-sm leading-relaxed">
                      ‡§Æ‡•Å‡§ù‡•á astrology tips ‡§î‡§∞ offers ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç email ‡§≠‡•á‡§ú‡•á‡§Ç (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï)
                    </Label>
                  </div>
                </div>

                <div className="flex gap-4">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => setStep(1)}
                    className="flex-1"
                    data-testid="button-back"
                  >
                    ‡§µ‡§æ‡§™‡§∏
                  </Button>
                  <Button
                    type="submit"
                    className="flex-1 bg-orange-600 hover:bg-orange-700 text-lg p-3"
                    disabled={registerMutation.isPending}
                    data-testid="button-register"
                  >
                    {registerMutation.isPending ? "‡§ñ‡§æ‡§§‡§æ ‡§¨‡§®‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç..." : "‡§ñ‡§æ‡§§‡§æ ‡§¨‡§®‡§æ‡§è‡§Ç ‡§î‡§∞ Kundli ‡§™‡§æ‡§è‡§Ç"}
                  </Button>
                </div>
              </div>
            </>
          )}
        </form>

        {step === 2 && (
          <div className="mt-6 text-center">
            <p className="text-sm text-gray-600">
              ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ñ‡§æ‡§§‡§æ ‡§π‡•à?{" "}
              <button
                onClick={onSwitchToLogin}
                className="text-orange-600 hover:text-orange-700 font-medium"
                data-testid="link-login"
              >
                ‡§≤‡•â‡§ó ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç
              </button>
            </p>
          </div>
        )}

        {/* Registration Benefits */}
        {step === 1 && (
          <div className="mt-6 p-4 bg-gradient-to-r from-orange-50 to-amber-50 rounded-lg">
            <h4 className="font-semibold text-orange-800 mb-2">Registration ‡§ï‡•á ‡§´‡§æ‡§Ø‡§¶‡•á:</h4>
            <ul className="text-sm text-orange-700 space-y-1">
              <li>‚úì ‡§§‡•Å‡§∞‡§Ç‡§§ automatic Kundli generation</li>
              <li>‚úì Personalized numerology analysis</li>
              <li>‚úì AI chat support 24/7</li>
              <li>‚úì Compatibility checking with partners</li>
              <li>‚úì Secure data storage ‡§î‡§∞ privacy</li>
            </ul>
          </div>
        )}

        {/* Privacy Notice */}
        {step === 2 && (
          <div className="mt-6 p-4 bg-blue-50 rounded-lg">
            <h4 className="font-semibold text-blue-800 mb-2">üîí ‡§Ü‡§™‡§ï‡•Ä Privacy ‡§π‡§Æ‡§æ‡§∞‡•Ä Priority</h4>
            <ul className="text-sm text-blue-700 space-y-1">
              <li>‚Ä¢ ‡§∏‡§≠‡•Ä personal data encrypted ‡§∞‡§π‡§§‡§æ ‡§π‡•à</li>
              <li>‚Ä¢ ‡§ï‡§≠‡•Ä ‡§≠‡•Ä third party ‡§ï‡•á ‡§∏‡§æ‡§• share ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡•á</li>
              <li>‚Ä¢ ‡§Ü‡§™ ‡§ï‡§≠‡•Ä ‡§≠‡•Ä ‡§Ö‡§™‡§®‡§æ data delete ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç</li>
              <li>‚Ä¢ Industry standard security measures</li>
            </ul>
          </div>
        )}
      </CardContent>
    </Card>
  );
}